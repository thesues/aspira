package main

import (
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"runtime"
	"strings"

	"github.com/pkg/errors"
	"github.com/urfave/cli/v2"
)

func openBrowser(url string) {
	for _, b := range browsers() {
		args := strings.Split(b, " ")
		if len(args) == 0 {
			continue
		}
		viewer := exec.Command(args[0], append(args[1:], url)...)
		viewer.Stderr = os.Stderr

		if err := viewer.Start(); err == nil {
			return
		}
	}
}

func browsers() []string {
	var cmds []string
	if userBrowser := os.Getenv("BROWSER"); userBrowser != "" {
		cmds = append(cmds, userBrowser)
	}
	switch runtime.GOOS {
	case "darwin":
		cmds = append(cmds, "/usr/bin/open")
	case "windows":
		cmds = append(cmds, "cmd /c start")
	default:
		// Commands opening browsers are prioritized over xdg-open, so browser()
		// command can be used on linux to open the .svg file generated by the -web
		// command (the .svg file includes embedded javascript so is best viewed in
		// a browser).
		cmds = append(cmds, []string{"chrome", "google-chrome", "chromium", "firefox", "sensible-browser"}...)
		if os.Getenv("DISPLAY") != "" {
			// xdg-open is only for use in a desktop environment.
			cmds = append(cmds, "xdg-open")
		}
	}
	return cmds
}

func plot(c *cli.Context) (err error) {
	jsonFile := c.Args().First()
	if jsonFile == "" {
		return errors.Errorf("usage: plot <file>")
	}
	_, err = os.Stat(jsonFile)
	if err != nil {
		return err
	}

	url := "http://localhost:8000/index.html?file=" + jsonFile

	go openBrowser(url)

	fmt.Printf("open %s", url)
	return http.ListenAndServe(":8000", http.FileServer(http.Dir(".")))
}
