/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

//import "raft.proto";

package aspirapb;

// Worker services.
message Payload {
	bytes Data = 1;
}


message RaftContext {
	uint64 id = 1;
	uint64 gid = 2;
	string addr = 3;
}


//save MembershipState into
//workerID=>Addr
message MembershipState {
	map<uint64,string> nodes = 1;
}

message Snapshot {
	RaftContext context = 1;
	uint64 index = 2;
	uint64 read_ts = 3;
	// done is used to indicate that snapshot stream was a success.
	bool done	= 4;
	// since_ts stores the ts of the last snapshot to support diff snap updates.
	uint64 since_ts = 5;
}


message RaftBatch {
	RaftContext context = 1;
	Payload payload = 2;
}


message EntryMeta {
        uint64     Term  = 1;
        uint64     Index = 2;
                enum Type {
                        Put = 0;
                        LeaderCommit = 1;
                        ConfChange = 2;
                        PutWithOffset = 3;
                }
                Type EntryType = 3;
                bytes      Data = 4;
                string     associateKey=5;
}

//Type == Put ==> set associateKey, save ext
//Type == PutWithOffset => ext save all the data
//Type == LeaderCommit => ...


/*
AspiraProposalPut{
	string associateKey
	bytes data
}
AspiraProposalPutWithOffset {
	string associateKey
	bytes data
	uint64 key
	uint32 reservation
	uint32 offset
}
*/

message AspiraProposal {
	enum Type {
		Put = 0;
		PutWithOffset = 1;
		Delete = 2;
	}
	Type ProposalType = 1;
	uint64 key = 2;
	uint64 offset = 3;
	string associateKey = 4;
	bytes data = 5;
}


message BlobRaftMessageRequest {
	RaftContext context = 1;
	Payload payload = 2;
}

message BlobRaftMessageResponse {
}

//raft intenal service
service Raft {
	rpc Heartbeat (Payload)        returns (stream Payload) {}
	rpc RaftMessage (stream RaftBatch) returns (Payload) {}
	rpc BlobRaftMessage (BlobRaftMessageRequest) returns (BlobRaftMessageResponse) {}
	rpc JoinCluster (RaftContext)      returns (Payload) {}
	rpc StreamSnapshot (RaftContext) returns (stream Payload) {}
}



enum TnxType {
		prepare = 0;
		commit = 1;
		abort = 3;
		retry = 4;
}


message AddWorkerRequest {
	uint64 gid = 1;
 	uint64 id = 2;
	string joinCluster = 3;
	string initialCluster = 4;
	TnxType type = 5;
}

message AddWorkerResponse {
}


message PutStreamRequest {
	oneof data {
		uint64 gid = 1;
		Payload payload = 2;
	}
}

message PutRequest {
	uint64 gid = 1;
	Payload payload = 2;
}

message PutResponse{
	uint64 gid = 1;
	uint64 oid = 2;
}

message GetRequest {
	uint64 gid = 1;
	uint64 oid = 2;
}

service Store {
	rpc AddWorker(AddWorkerRequest) returns (AddWorkerResponse) {}
	rpc PutStream(stream PutStreamRequest) returns (PutResponse){}
	rpc Put(PutRequest) returns (PutResponse){}
	rpc Get(GetRequest) returns (stream Payload){}
	//rpc RemoveWorker
	//rpc Put
	//rpc Delete
	//rpc Get
}

//zero service
message ZeroAllocIDRequest{
	//header
	int32 count = 1;
}

//allocID range from [start,end), half open
message ZeroAllocIDResponse {
	uint64 start = 1;
	uint64 end = 2;
}

//I do not want to import raft's proto.
//the progress should be the same
message WorkerStatus {
	enum ProgressType {
		Probe = 0;
		Replicate = 1;
		Snapshot = 2;
		Unknown = 3;
		Leader = 4;
	}
	//workerid => progressType
	map<uint64,ProgressType> progress = 1;
	RaftContext raftContext = 2;
	//usage infomation
	uint64 DataFreeBytes = 3;
}


message ZeroHeartbeatRequest {
	uint64 storeId = 1;
	//gid => workerstatus
	map<uint64, WorkerStatus> workers = 2;
}


enum Code {
	OK = 0;
	NOT_LEADER = 1;
}

message ZeroHeartbeatResponse {
	Code code = 1;
}


message ZeroRegistStoreRequest {
	string address = 1;
	uint64 storeId = 2;
	uint64 emtpySlots = 3;
	string name = 4;
}


message ZeroRegistStoreResponse {
}


message ZeroWorkerInfo {
	uint64 workId = 1;
	uint64 storeId = 2;
	uint64 gid = 3;
}

message ZeroStoreInfo {
	string address = 1;
	uint64 storeId = 2;
	uint64 slots = 3;
	string name = 4;
}

message ZeroAddWorkerGroupRequest{
}

message ZeroAddWorkerGroupResponse {
	uint64 gid = 1;
}


message ZeroQueryWorkerRequest {
	uint64 gid = 1;
 	uint64 id = 2;
	uint64 storeId = 3;
}

message ZeroQueryWorkerResponse {
	TnxType type = 1;
}

message GroupStatus {
	uint64 gid = 1;
	uint64 freeBytes = 2;
	repeated ZeroStoreInfo stores = 3; //leader store is the first
}

message ClusterStatusRequest {
}

message ClusterStatusResponse {
	repeated GroupStatus groups = 1;
}


message ZeroDisplayRequest{
}
message ZeroDisplayResponse{
	string data = 1;
}

message ZeroIsLeaderRequest{

}
message ZeroIsLeaderResponse{
	bool isLeader = 1;
}

//zero service
service Zero {
	rpc AllocID(ZeroAllocIDRequest) returns (ZeroAllocIDResponse){} //admin
	rpc RegistStore(ZeroRegistStoreRequest) returns (ZeroRegistStoreResponse) {} //store call 
	rpc StreamHeartbeat(stream ZeroHeartbeatRequest) returns (ZeroHeartbeatResponse){} //store call
	rpc AddWorkerGroup(ZeroAddWorkerGroupRequest) returns (ZeroAddWorkerGroupResponse) {} //admin
	rpc QueryWorker(ZeroQueryWorkerRequest) returns (ZeroQueryWorkerResponse) {}  //store call
	rpc ClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse) {} //aspira client call
	rpc Display(ZeroDisplayRequest) returns (ZeroDisplayResponse) {} //http server or end user call
	rpc IsLeader(ZeroIsLeaderRequest) returns (ZeroIsLeaderResponse){}
}